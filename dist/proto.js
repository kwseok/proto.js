!function(t){var r={};function e(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=t,e.c=r,e.d=function(t,r,o){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var n in t)e.d(o,n,function(r){return t[r]}.bind(null,n));return o},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=1)}([function(t,r){function e(r){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(r)}t.exports=e},function(t,r,e){"use strict";e.r(r),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){for(var r=0;r<this.length;r++)if(r in this&&this[r]===t)return r;return-1});Array.prototype.indexOf;Array.prototype.contains||(Array.prototype.contains=function(t){return this.indexOf(t)>=0});Array.prototype.contains;Array.prototype.every||(Array.prototype.every=function(t,r){for(var e=0;e<this.length;e++)if(!t.call(r||this,this[e],e,this))return!1;return!0});Array.prototype.every;Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)});Array.isArray;Array.prototype.flatMap||(Array.prototype.flatMap=function(t,r){for(var e=[],o=0;o<this.length;o++){var n=t.call(r||this,this[o],o,this);Array.isArray(n)?e.push.apply(e,n):n&&e.push(n)}return e});Array.prototype.flatMap;Array.prototype.filter||(Array.prototype.filter=function(t,r){var e=this;return this.flatMap((function(o,n){if(t.call(r||e,o,n,e))return o}))});Array.prototype.filter;Array.prototype.first||(Array.prototype.first=function(){return this[0]});Array.prototype.first;Array.prototype.groupBy||(Array.prototype.groupBy=function(t,r){if("function"!=typeof t)throw new Error(t+" is not a function");for(var e={},o=0;o<this.length;o++){var n=this[o],i=t.call(r||this,n,o,this);null!=i&&(i in e?e[i].push(n):e[i]=[n])}return e});Array.prototype.groupBy;Array.prototype.grouped||(Array.prototype.grouped=function(t){for(var r=[],e=0;e<this.length;e+=t)r.push(this.slice(e,e+t));return r});Array.prototype.grouped;Array.prototype.groupedRight||(Array.prototype.groupedRight=function(t){for(var r=[],e=this.length;e>0;e-=t)r.push(this.slice(Math.max(0,e-t),e));return r.reverse()});Array.prototype.groupedRight;Array.prototype.include||(Array.prototype.include=function(t){var r=this.indexOf(t);return r>-1?this[r]=t:this.push(t),this});Array.prototype.include;Array.prototype.joinPaths||(Array.prototype.joinPaths=function(){for(var t="",r=0;r<this.length;r++)this[r]&&(t.length>0&&"/"!==t.charAt(t.length-1)&&(t+="/"),t+=this[r].toString());return t});Array.prototype.joinPaths;Array.prototype.last||(Array.prototype.last=function(){return this[this.length-1]});Array.prototype.last;Array.prototype.map||(Array.prototype.map=function(t,r){for(var e=[],o=1;o<=this.length;o++)e.push(t.call(r||this,this[o],o,this));return e});Array.prototype.map;Array.prototype.reduce||(Array.prototype.reduce=function(t,r){if(!(this.length>0))throw new TypeError("Reduce of empty array with no initial value");for(var e=this[0],o=1;o<=this.length;o++)e=t.call(r||this,e,this[o],o,this);return e});Array.prototype.reduce;Array.prototype.max||(Array.prototype.max=function(){return this.reduce((function(t,r){return t>r?t:r}))});Array.prototype.max;Array.prototype.min||(Array.prototype.min=function(){return this.reduce((function(t,r){return t<r?t:r}))});Array.prototype.min;Array.range||(Array.range=function(t,r){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=[],n="number"==typeof t&&"number"==typeof r,i=n?t:t.toString().charCodeAt(0),p=n?r:r.toString().charCodeAt(0);e=Math.abs(e)||1,i>p&&(e=-e);for(var a=i;e>0?a<=p:a>=p;a+=e)o.push(n?a:String.fromCharCode(a));return o});Array.range;Array.prototype.remove||(Array.prototype.remove=function(t){for(var r=this.length-1;r>=0;--r)this[r]===t&&this.splice(r,1);return this});Array.prototype.remove;Array.prototype.some||(Array.prototype.some=function(t,r){if("function"!=typeof t)throw new Error(t+" is not a function");for(var e=0;e<this.length;e++)if(t.call(r||this,this[e],e,this))return!0;return!1});Array.prototype.some;RegExp.escape||(RegExp.escape=function(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")});RegExp.escape;String.prototype.antStylePathToRegex||(String.prototype.antStylePathToRegex=function(){if(0===this.length)throw new RangeError("Path must not be empty.");var t=this.replace(/\/{2,}/g,"/").replace(/[-[\]{}()+.,\\^$|#\s]/g,"\\$&").replace(/((\/?\*\*)|(\/?\*)|(\?)|(\/))/g,(function(t){switch(t){case"/**":return"(?:/{1,}.*)?";case"**":return".*";case"/*":return"(?:/{1,}[^/]*)?";case"*":return"[^/]*";case"?":return"[^/]";case"/":return"/{1,}"}}));return new RegExp("^("+t+")$")}),String.prototype.a||(String.prototype.a=String.prototype.antStylePathToRegex);String.prototype.antStylePathToRegex;String.prototype.xmlUnescape||(String.prototype.xmlUnescape=function(){return this.replace(/(&lt;|&gt;|&#34;|&#39;|&amp;)/g,(function(t){switch(t){case"&lt;":return"<";case"&gt;":return">";case"&#34;":return'"';case"&#39;":return"'";case"&amp;":return"&";default:return t}}))});String.prototype.xmlUnescape;String.prototype.br2nl||(String.prototype.br2nl=function(t){var r=this.replace(/(<br>|<br\/>)/g,"\n");return t?r.xmlUnescape():r});String.prototype.br2nl;String.prototype.compareTo||(String.prototype.compareTo=function(t){return null==t||this>t?1:this<t?-1:0});String.prototype.compareTo;String.prototype.contains||(String.prototype.contains=function(t){return this.indexOf(t)>-1});String.prototype.contains;var o=e(0),n=e.n(o);String.prototype.getLength||(String.prototype.getLength=function(t){var r=arguments,e=0,o=function(){return r[e]},i=function(){return r[e++]};if(!1===(t=!!["boolean","number"].contains(n()(o()))&&i()))return this.length;for(var p=0,a=0;a<this.length;a++){var u=this.charCodeAt(a);switch(!1){case!(u<=127):p+=1;break;case!("number"==typeof t&&t>0):p+=t;break;case!(u<=2047):p+=2;break;case!(u<=65535):p+=3;break;default:p+=4}}return p});String.prototype.getLength;String.prototype.cutstring||(String.prototype.cutstring=function(t,r,e){var o=arguments,i=0,p=function(){return o[i]},a=function(){return o[i++]};if(t=!!["boolean","number"].contains(n()(p()))&&a(),"number"!=typeof p())throw new TypeError(p()+" is not a number");r=a(),e="string"==typeof p()?a():"";var u=this.getLength(t);if(!(u>r))return this;var y=e.getLength(t);if(y>r)throw new RangeError("Max length must be more than suffix length");for(var s="",h=0,g=0;g<this.length;g++){var c=this.charAt(g),f=c.getLength(t);if(h+f>r-y)break;h+=f,s+=c}return s+e});String.prototype.cutstring;String.prototype.endsWith||(String.prototype.endsWith=function(t){var r=this.lastIndexOf(t);return r>-1&&r===this.length-t.toString().length});String.prototype.endsWith;String.prototype.format||(String.prototype.format=function(){var t=arguments;return this.replace(/(''|'\{|}'|\{(\w+)})/g,(function(r,e,o){switch(e){case"''":return"'";case"'{":return"{";case"}'":return"}";default:return(/^\d+$/g.test(o)?Array.isArray(t[0])?t[0]:t:t[0]||{})[o]}}))});String.prototype.format;String.prototype.formatVariables||(String.prototype.formatVariables=function(){for(var t,r=/(''|'\{|\}'|\{(\w+)\})/g,e=[];t=r.exec(this);){var o=t[0];"''"!==o&&"'{"!==o&&"}'"!==o&&e.push(t[2])}return e});String.prototype.formatVariables;String.prototype.grouped||(String.prototype.grouped=function(t){if(!(t>1))throw new RangeError("Invalid size value");"number"!=typeof t&&(t=parseInt(t));for(var r=[],e=0;e<this.length;e+=t)r.push(this.slice(e,e+t));return r});String.prototype.grouped;String.prototype.groupedRight||(String.prototype.groupedRight=function(t){if(!(t>1))throw new RangeError("Invalid size value");"number"!=typeof t&&(t=parseInt(t));for(var r=[],e=this.length;e>0;e-=t)r.push(this.slice(Math.max(0,e-t),e));return r.reverse()});String.prototype.groupedRight;String.prototype.repeat||(String.prototype.repeat=function(t){if(!(t>=0))throw new RangeError("Invalid count value");for(var r="",e=0;e<t;e++)r+=this.toString();return r});String.prototype.repeat;String.prototype.leftPad||(String.prototype.leftPad=function(t,r){if("number"!=typeof t)throw new TypeError(t+" is not a number");return r||(r=" "),this.length>=t?this.toString():r.repeat(t-this.length)+this.toString()}),String.prototype.lpad||(String.prototype.lpad=String.prototype.leftPad);String.prototype.leftPad;String.prototype.xmlEscape||(String.prototype.xmlEscape=function(){return this.replace(/(<|>|"|'|&)/g,(function(t){switch(t){case"<":return"&lt;";case">":return"&gt;";case'"':return"&#34;";case"'":return"&#39;";case"&":return"&amp;";default:return t}}))});String.prototype.xmlEscape;String.prototype.nl2br||(String.prototype.nl2br=function(t){return(t?this.xmlEscape():this).replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")});String.prototype.nl2br;String.prototype.quote||(String.prototype.quote=function(t){if("boolean"!=typeof t&&(t=!0),!t&&this.length>=2){if('"'===this.charAt(0)&&'"'===this.charAt(this.length-1))return this.toString();if("'"===this.charAt(0)&&"'"===this.charAt(this.length-1))return this.toString()}return'"'+this+'"'});String.prototype.quote;String.prototype.regex||(String.prototype.regex=function(t){return new RegExp(this,t)}),String.prototype.r||(String.prototype.r=String.prototype.regex);String.prototype.regex;String.prototype.rightPad||(String.prototype.rightPad=function(t,r){if("number"!=typeof t)throw new TypeError(t+" is not a number");return r||(r=" "),this.length>=t?this.toString():this.toString()+r.repeat(t-this.length)}),String.prototype.rpad||(String.prototype.rpad=String.prototype.rightPad);String.prototype.rightPad;String.prototype.startsWith||(String.prototype.startsWith=function(t){return 0===this.indexOf(t)});String.prototype.startsWith;String.prototype.unquote||(String.prototype.unquote=function(){return this.length>=2&&('"'===this.charAt(0)&&'"'===this.charAt(this.length-1)||"'"===this.charAt(0)&&"'"===this.charAt(this.length-1))?this.slice(1,-1):this.toString()});String.prototype.unquote}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,